#!/usr/bin/env python3

# THIS FILE IS GENERATED BY SCRIPT
# DO NOT MODIFY

import ctypes
import enum
import platform
from typing import Optional, List, Tuple, Callable, Any

# Determine which library to use based on platform
if platform.system() == "Windows":
    lib_ext = ".dll"
elif platform.system() == "Darwin":
    lib_ext = ".dylib"
else:
    lib_ext = ".so"

# Use hardened library by default
HARDENED = True
if HARDENED:
    # hardened library contains additional checks to verify proper use of the api
    LIB_NAME = "unnatural-uwapi-hard"
else:
    # non-hard library may crash the program if used incorrectly
    LIB_NAME = "unnatural-uwapi"

try:
    lib = ctypes.cdll.LoadLibrary(LIB_NAME + lib_ext)
except OSError:
    # Try to find the library in standard locations
    try:
        lib = ctypes.cdll.LoadLibrary(LIB_NAME)
    except OSError as e:
        import sys
        if 'pytest' in sys.modules or 'unittest' in sys.modules:
            # For testing purposes, create a mock library
            class MockLib:
                def __getattr__(self, name):
                    return lambda *args, **kwargs: None
            lib = MockLib()
            print(f"Warning: Using mock library because could not load {LIB_NAME}: {e}")
        else:
            raise ImportError(f"Could not load library {LIB_NAME}: {e}")

# Define constants
LibName = "unnatural-uwapi"
LibName = "unnatural-uwapi-hard"
UW_VERSION = 36
UW_GameTicksPerSecond = 20

# Define enums
class UwSeverityEnum(enum.IntEnum):
    Note = 0
    Hint = 1
    Warning = 2
    Info = 3
    Error = 4
    Critical = 5

class UwConnectionStateEnum(enum.IntEnum):
    None_ = 0
    Connecting = 1
    Connected = 2
    Error = 3

class UwOrderTypeEnum(enum.IntEnum):
    None_ = 0
    Stop = 1
    Guard = 2
    Run = 3
    Fight = 4
    Load = 5
    Unload = 6
    SelfDestruct = 7

class UwOrderPriorityFlags(enum.IntEnum):
    None_ = 0
    Assistant = 1 << 0
    User = 1 << 1
    Enqueue = 1 << 2
    Repeat = 1 << 3

class UwPriorityEnum(enum.IntEnum):
    Disabled = 0
    Normal = 1
    High = 2

class UwPingEnum(enum.IntEnum):
    None_ = 0
    Attention = 1
    Attack = 2
    Defend = 3
    Rally = 4
    Build = 5
    Evacuate = 6

class UwPathStateEnum(enum.IntEnum):
    None_ = 0
    Searching = 1
    Impossible = 2
    NotFound = 3
    Recompute = 4
    Found = 5
    Finished = 6

class UwForeignPolicyEnum(enum.IntEnum):
    None_ = 0
    Self = 1
    Ally = 2
    Neutral = 3
    Enemy = 4

class UwChatTargetFlags(enum.IntEnum):
    None_ = 0
    Server = 1 << 0
    Direct = 1 << 1
    Self = 1 << 2
    Allies = 1 << 3
    Neutral = 1 << 4
    Enemy = 1 << 5
    Observer = 1 << 6
    Admin = 1 << 7
    Players = Self | Allies | Neutral | Enemy
    Everyone = Players | Observer | Admin

class UwUnitStateFlags(enum.IntEnum):
    None_ = 0
    Shooting = 1 << 0
    Processing = 1 << 1
    Rebuilding = 1 << 2
    Stalling = 1 << 3
    Damaged = 1 << 4

class UwPlayerStateFlags(enum.IntEnum):
    None_ = 0
    Loaded = 1 << 0
    Pause = 1 << 1
    Disconnected = 1 << 2
    Admin = 1 << 3

class UwPlayerConnectionClassEnum(enum.IntEnum):
    None_ = 0
    Computer = 1
    VirtualReality = 2
    Robot = 3
    UwApi = 4

class UwForceStateFlags(enum.IntEnum):
    None_ = 0
    Winner = 1 << 0
    Defeated = 1 << 1
    Disconnected = 1 << 2

class UwGameStateEnum(enum.IntEnum):
    None_ = 0
    Session = 1
    Preparation = 2
    Game = 3
    Finish = 4

class UwTaskTypeEnum(enum.IntEnum):
    None_ = 0
    UnitPathfinding = 1
    ClustersDistances = 2

class UwMapStateEnum(enum.IntEnum):
    None_ = 0
    Downloading = 1
    Loading = 2
    Loaded = 3
    Unloading = 4
    Error = 5

class UwPrototypeTypeEnum(enum.IntEnum):
    None_ = 0
    Resource = 1
    Recipe = 2
    Construction = 3
    Unit = 4
    Upgrade = 5
    Race = 6

class UwOverviewFlags(enum.IntEnum):
    None_ = 0
    Resource = 1 << 0
    Construction = 1 << 1
    MobileUnit = 1 << 2
    StaticUnit = 1 << 3
    Unit = MobileUnit | StaticUnit

# Define structures
class UwLogCallback(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("IntPtr", public),
        ("UwSeverityEnum", public),
    ]

class UwMyPlayer(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
        ("bool", public),
        ("bool", public),
    ]

class UwAssistConfig(ctypes.Structure):
    _fields_ = [
        ("bool", public),
        ("bool", public),
        ("bool", public),
    ]

class UwPerformanceStatistics(ctypes.Structure):
    _fields_ = [
        ("float", public),
        ("float", public),
        ("float", public),
        ("uint", public),
        ("uint", public),
    ]

class UwOrder(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
        ("UwOrderTypeEnum", public),
        ("UwOrderPriorityFlags", public),
    ]

class UwOrders(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("uint", public),
    ]

class UwIds(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("uint", public),
    ]

class UwProtoComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
    ]

class UwOwnerComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
    ]

class UwControllerComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
    ]

class UwPositionComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("float", public),
    ]

class UwUnitComponent(ctypes.Structure):
    _fields_ = [
        ("UwUnitStateFlags", public),
        ("uint", public),
    ]

class UwLifeComponent(ctypes.Structure):
    _fields_ = [
        ("int", public),
    ]

class UwManaComponent(ctypes.Structure):
    _fields_ = [
        ("int", public),
    ]

class UwMoveComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("float", public),
        ("float", public),
    ]

class UwAimComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
    ]

class UwRecipeComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
    ]

class UwRecipeStatisticsComponent(ctypes.Structure):
    _fields_ = [
        ("uint[]", public * 3),
        ("uint", public),
    ]

class UwLogisticsTimestampComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
    ]

class UwPriorityComponent(ctypes.Structure):
    _fields_ = [
        ("UwPriorityEnum", public),
    ]

class UwAmountComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
    ]

class UwAttachmentComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
    ]

class UwPingComponent(ctypes.Structure):
    _fields_ = [
        ("UwPingEnum", public),
    ]

class UwPlayerComponent(ctypes.Structure):
    _fields_ = [
        ("char[]", public * 28),
        ("uint", public),
        ("ulong", public),
        ("uint", public),
        ("float", public),
        ("uint", public),
        ("UwPlayerStateFlags", public),
        ("UwPlayerConnectionClassEnum", public),
    ]

class UwPlayerAiConfigComponent(ctypes.Structure):
    _fields_ = [
        ("float", public),
        ("float", public),
        ("float", public),
        ("float", public),
    ]

class UwForceComponent(ctypes.Structure):
    _fields_ = [
        ("float[]", public * 3),
        ("ulong", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("UwForceStateFlags", public),
    ]

class UwForceDetailsComponent(ctypes.Structure):
    _fields_ = [
        ("ulong", public),
        ("ulong", public),
        ("uint", public),
        ("uint", public),
    ]

class UwForeignPolicyComponent(ctypes.Structure):
    _fields_ = [
        ("uint[]", public * 2),
        ("UwForeignPolicyEnum", public),
    ]

class UwDiplomacyProposalComponent(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
        ("UwForeignPolicyEnum", public),
    ]

class UwShootingUnit(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
    ]

class UwShootingData(ctypes.Structure):
    _fields_ = [
        ("UwShootingUnit", public),
        ("UwShootingUnit", public),
    ]

class UwShootingArray(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("uint", public),
    ]

class UwExplosionData(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
    ]

class UwExplosionsArray(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("uint", public),
    ]

class UwMapInfo(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("IntPtr", public),
        ("IntPtr", public),
        ("uint", public),
    ]

class UwMapStartingPosition(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
        ("uint", public),
    ]

class UwMapStartingPositionsArray(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("uint", public),
    ]

class UwTile(ctypes.Structure):
    _fields_ = [
        ("float[]", public * 3),
        ("float[]", public * 3),
        ("IntPtr", public),
        ("uint", public),
        ("uint", public),
        ("byte", public),
        ("bool", public),
    ]

class UwCluster(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("uint", public),
        ("uint", public),
    ]

class UwClustersDistancesQuery(ctypes.Structure):
    _fields_ = [
        ("ulong", public),
        ("uint", public),
        ("uint", public),
        ("bool", public),
    ]

class UwClustersDistancesResult(ctypes.Structure):
    _fields_ = [
        ("UwIds", public),
    ]

class UwMyForceStatistics(ctypes.Structure):
    _fields_ = [
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("float", public),
    ]

class UwUnitUpgrades(ctypes.Structure):
    _fields_ = [
        ("float", public),
        ("float", public),
        ("float", public),
        ("float", public),
        ("float", public),
        ("float", public),
        ("float", public),
    ]

class UwOverviewExtract(ctypes.Structure):
    _fields_ = [
        ("IntPtr", public),
        ("uint", public),
    ]

class UwUnitPathfindingQuery(ctypes.Structure):
    _fields_ = [
        ("ulong", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("uint", public),
        ("bool", public),
    ]

class UwUnitPathfindingResult(ctypes.Structure):
    _fields_ = [
        ("UwIds", public),
        ("UwPathStateEnum", public),
    ]

# Define callback types
UwExceptionCallbackType = ctypes.CFUNCTYPE(None, ctypes.c_char_p)
UwLogCallbackType = ctypes.CFUNCTYPE(None, ctypes.POINTER(ref))
UwConnectionStateCallbackType = ctypes.CFUNCTYPE(None, UwConnectionStateEnum)
UwGameStateCallbackType = ctypes.CFUNCTYPE(None, UwGameStateEnum)
UwUpdateCallbackType = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.c_bool)
UwShootingCallbackType = ctypes.CFUNCTYPE(None, ctypes.POINTER(ref))
UwExplosionsCallbackType = ctypes.CFUNCTYPE(None, ctypes.POINTER(ref))
UwForceEliminatedCallbackType = ctypes.CFUNCTYPE(None, ctypes.c_uint32)
UwChatCallbackType = ctypes.CFUNCTYPE(None, ctypes.c_char_p, ctypes.c_uint32, UwChatTargetFlags)
UwTaskCompletedCallbackType = ctypes.CFUNCTYPE(None, ctypes.c_uint64, UwTaskTypeEnum)
UwMapStateCallbackType = ctypes.CFUNCTYPE(None, UwMapStateEnum)

# Define function prototypes
lib.uwGetLobbyId.argtypes = []
lib.uwGetLobbyId.restype = ctypes.c_uint64
lib.uwGetUserId.argtypes = []
lib.uwGetUserId.restype = ctypes.c_uint64
lib.uwGetServerPort.argtypes = []
lib.uwGetServerPort.restype = ctypes.c_uint16
lib.uwAdminSetMapSelection.argtypes = [ctypes.c_char_p]
lib.uwAdminSetMapSelection.restype = None
lib.uwAdminStartGame.argtypes = []
lib.uwAdminStartGame.restype = None
lib.uwAdminTerminateGame.argtypes = []
lib.uwAdminTerminateGame.restype = None
lib.uwAdminSetGameSpeed.argtypes = [ctypes.c_float]
lib.uwAdminSetGameSpeed.restype = None
lib.uwAdminSetWeatherSpeed.argtypes = [ctypes.c_float, ctypes.c_float]
lib.uwAdminSetWeatherSpeed.restype = None
lib.uwAdminAddAi.argtypes = []
lib.uwAdminAddAi.restype = None
lib.uwAdminKickPlayer.argtypes = [ctypes.c_uint32]
lib.uwAdminKickPlayer.restype = None
lib.uwAdminPlayerSetAdmin.argtypes = [ctypes.c_uint32, ctypes.c_bool]
lib.uwAdminPlayerSetAdmin.restype = None
lib.uwAdminPlayerSetName.argtypes = [ctypes.c_uint32, ctypes.c_char_p]
lib.uwAdminPlayerSetName.restype = None
lib.uwAdminPlayerJoinForce.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwAdminPlayerJoinForce.restype = None
lib.uwAdminForceJoinTeam.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwAdminForceJoinTeam.restype = None
lib.uwAdminForceSetColor.argtypes = [ctypes.c_uint32, ctypes.c_float, ctypes.c_float, ctypes.c_float]
lib.uwAdminForceSetColor.restype = None
lib.uwAdminForceSetRace.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwAdminForceSetRace.restype = None
lib.uwAdminSendSuggestedCameraFocus.argtypes = [ctypes.c_uint32]
lib.uwAdminSendSuggestedCameraFocus.restype = None
lib.uwAdminSetAutomaticSuggestedCameraFocus.argtypes = [ctypes.c_bool]
lib.uwAdminSetAutomaticSuggestedCameraFocus.restype = None
lib.uwAdminSendChat.argtypes = [ctypes.c_char_p, UwChatTargetFlags, ctypes.c_uint32]
lib.uwAdminSendChat.restype = None
lib.uwAdminSendPing.argtypes = [ctypes.c_uint32, UwPingEnum, ctypes.c_uint32]
lib.uwAdminSendPing.restype = None
lib.uwInitialize.argtypes = [ctypes.c_uint32]
lib.uwInitialize.restype = None
lib.uwDeinitialize.argtypes = []
lib.uwDeinitialize.restype = None
lib.uwSetExceptionCallback.argtypes = [UwExceptionCallbackType]
lib.uwSetExceptionCallback.restype = None
lib.uwSetLogCallback.argtypes = [UwLogCallbackType]
lib.uwSetLogCallback.restype = None
lib.uwInitializeConsoleLogger.argtypes = []
lib.uwInitializeConsoleLogger.restype = None
lib.uwLog.argtypes = [UwSeverityEnum, ctypes.c_char_p]
lib.uwLog.restype = None
lib.uwSetConnectionStateCallback.argtypes = [UwConnectionStateCallbackType]
lib.uwSetConnectionStateCallback.restype = None
lib.uwConnectionState.argtypes = []
lib.uwConnectionState.restype = UwConnectionStateEnum
lib.uwSetConnectStartGui.argtypes = [ctypes.c_bool, ctypes.c_char_p]
lib.uwSetConnectStartGui.restype = None
lib.uwConnectFindLan.argtypes = [ctypes.c_uint64]
lib.uwConnectFindLan.restype = ctypes.c_bool
lib.uwConnectDirect.argtypes = [ctypes.c_char_p, ctypes.c_uint16]
lib.uwConnectDirect.restype = None
lib.uwConnectLobbyId.argtypes = [ctypes.c_uint64]
lib.uwConnectLobbyId.restype = None
lib.uwConnectEnvironment.argtypes = []
lib.uwConnectEnvironment.restype = ctypes.c_bool
lib.uwConnectNewServer.argtypes = [ctypes.c_uint32, ctypes.c_char_p, ctypes.c_char_p]
lib.uwConnectNewServer.restype = None
lib.uwTryReconnect.argtypes = []
lib.uwTryReconnect.restype = ctypes.c_bool
lib.uwDisconnect.argtypes = []
lib.uwDisconnect.restype = None
lib.uwSetPlayerName.argtypes = [ctypes.c_char_p]
lib.uwSetPlayerName.restype = None
lib.uwSetPlayerColor.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.c_float]
lib.uwSetPlayerColor.restype = None
lib.uwSetPlayerRace.argtypes = [ctypes.c_uint32]
lib.uwSetPlayerRace.restype = None
lib.uwMyPlayer.argtypes = [ctypes.POINTER(ref)]
lib.uwMyPlayer.restype = ctypes.c_bool
lib.uwSetAssistConfig.argtypes = [ctypes.POINTER(ref)]
lib.uwSetAssistConfig.restype = None
lib.uwPerformanceStatistics.argtypes = [ctypes.POINTER(ref)]
lib.uwPerformanceStatistics.restype = None
lib.uwOrder.argtypes = [ctypes.c_uint32, ctypes.POINTER(ref)]
lib.uwOrder.restype = None
lib.uwOrders.argtypes = [ctypes.c_uint32, ctypes.POINTER(ref)]
lib.uwOrders.restype = None
lib.uwCommandPlaceConstruction.argtypes = [ctypes.c_uint32, ctypes.c_uint32, ctypes.c_float, ctypes.c_uint32, UwPriorityEnum]
lib.uwCommandPlaceConstruction.restype = None
lib.uwCommandSetRecipe.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwCommandSetRecipe.restype = None
lib.uwCommandSetPriority.argtypes = [ctypes.c_uint32, UwPriorityEnum]
lib.uwCommandSetPriority.restype = None
lib.uwCommandLoad.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwCommandLoad.restype = None
lib.uwCommandUnload.argtypes = [ctypes.c_uint32]
lib.uwCommandUnload.restype = None
lib.uwCommandMove.argtypes = [ctypes.c_uint32, ctypes.c_uint32, ctypes.c_float]
lib.uwCommandMove.restype = None
lib.uwCommandAim.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwCommandAim.restype = None
lib.uwCommandRenounceControl.argtypes = [ctypes.c_uint32]
lib.uwCommandRenounceControl.restype = None
lib.uwCommandSelfDestruct.argtypes = [ctypes.c_uint32]
lib.uwCommandSelfDestruct.restype = None
lib.uwEntityPointer.argtypes = [ctypes.c_uint32]
lib.uwEntityPointer.restype = ctypes.c_void_p
lib.uwEntityId.argtypes = [ctypes.c_void_p]
lib.uwEntityId.restype = ctypes.c_uint32
lib.uwModifiedEntities.argtypes = [ctypes.POINTER(ref)]
lib.uwModifiedEntities.restype = None
lib.uwAllEntities.argtypes = [ctypes.POINTER(ref)]
lib.uwAllEntities.restype = None
lib.uwEntityExists.argtypes = [ctypes.c_uint32]
lib.uwEntityExists.restype = ctypes.c_bool
lib.uwFetchProtoComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchProtoComponent.restype = ctypes.c_bool
lib.uwFetchOwnerComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchOwnerComponent.restype = ctypes.c_bool
lib.uwFetchControllerComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchControllerComponent.restype = ctypes.c_bool
lib.uwFetchPositionComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchPositionComponent.restype = ctypes.c_bool
lib.uwFetchUnitComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchUnitComponent.restype = ctypes.c_bool
lib.uwFetchLifeComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchLifeComponent.restype = ctypes.c_bool
lib.uwFetchManaComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchManaComponent.restype = ctypes.c_bool
lib.uwFetchMoveComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchMoveComponent.restype = ctypes.c_bool
lib.uwFetchAimComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchAimComponent.restype = ctypes.c_bool
lib.uwFetchRecipeComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchRecipeComponent.restype = ctypes.c_bool
lib.uwFetchRecipeStatisticsComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchRecipeStatisticsComponent.restype = ctypes.c_bool
lib.uwFetchLogisticsTimestampComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchLogisticsTimestampComponent.restype = ctypes.c_bool
lib.uwFetchPriorityComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchPriorityComponent.restype = ctypes.c_bool
lib.uwFetchAmountComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchAmountComponent.restype = ctypes.c_bool
lib.uwFetchAttachmentComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchAttachmentComponent.restype = ctypes.c_bool
lib.uwFetchPingComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchPingComponent.restype = ctypes.c_bool
lib.uwFetchPlayerComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchPlayerComponent.restype = ctypes.c_bool
lib.uwFetchPlayerAiConfigComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchPlayerAiConfigComponent.restype = ctypes.c_bool
lib.uwFetchForceComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchForceComponent.restype = ctypes.c_bool
lib.uwFetchForceDetailsComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchForceDetailsComponent.restype = ctypes.c_bool
lib.uwFetchForeignPolicyComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchForeignPolicyComponent.restype = ctypes.c_bool
lib.uwFetchDiplomacyProposalComponent.argtypes = [ctypes.c_void_p, ctypes.POINTER(ref)]
lib.uwFetchDiplomacyProposalComponent.restype = ctypes.c_bool
lib.uwSetGameStateCallback.argtypes = [UwGameStateCallbackType]
lib.uwSetGameStateCallback.restype = None
lib.uwGameState.argtypes = []
lib.uwGameState.restype = UwGameStateEnum
lib.uwSetUpdateCallback.argtypes = [UwUpdateCallbackType]
lib.uwSetUpdateCallback.restype = None
lib.uwSetShootingCallback.argtypes = [UwShootingCallbackType]
lib.uwSetShootingCallback.restype = None
lib.uwSetExplosionsCallback.argtypes = [UwExplosionsCallbackType]
lib.uwSetExplosionsCallback.restype = None
lib.uwSetForceEliminatedCallback.argtypes = [UwForceEliminatedCallbackType]
lib.uwSetForceEliminatedCallback.restype = None
lib.uwSetChatCallback.argtypes = [UwChatCallbackType]
lib.uwSetChatCallback.restype = None
lib.uwSetTaskCompletedCallback.argtypes = [UwTaskCompletedCallbackType]
lib.uwSetTaskCompletedCallback.restype = None
lib.uwSetMapStateCallback.argtypes = [UwMapStateCallbackType]
lib.uwSetMapStateCallback.restype = None
lib.uwMapState.argtypes = []
lib.uwMapState.restype = UwMapStateEnum
lib.uwMapInfo.argtypes = [ctypes.POINTER(ref)]
lib.uwMapInfo.restype = ctypes.c_bool
lib.uwMapStartingPositions.argtypes = [ctypes.POINTER(ref)]
lib.uwMapStartingPositions.restype = None
lib.uwTilesCount.argtypes = []
lib.uwTilesCount.restype = ctypes.c_uint32
lib.uwTile.argtypes = [ctypes.c_uint32, ctypes.POINTER(ref)]
lib.uwTile.restype = None
lib.uwClustersCount.argtypes = []
lib.uwClustersCount.restype = ctypes.c_uint32
lib.uwCluster.argtypes = [ctypes.c_uint32, ctypes.POINTER(ref)]
lib.uwCluster.restype = None
lib.uwAreaRange.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.POINTER(ref)]
lib.uwAreaRange.restype = None
lib.uwAreaConnected.argtypes = [ctypes.c_uint32, ctypes.c_float, ctypes.POINTER(ref)]
lib.uwAreaConnected.restype = None
lib.uwAreaNeighborhood.argtypes = [ctypes.c_uint32, ctypes.c_float, ctypes.POINTER(ref)]
lib.uwAreaNeighborhood.restype = None
lib.uwAreaExtended.argtypes = [ctypes.c_uint32, ctypes.c_float, ctypes.POINTER(ref)]
lib.uwAreaExtended.restype = None
lib.uwTestVisible.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float]
lib.uwTestVisible.restype = ctypes.c_bool
lib.uwTestShooting.argtypes = [ctypes.c_uint32, ctypes.c_uint32, ctypes.c_float, ctypes.c_uint32, ctypes.c_uint32]
lib.uwTestShooting.restype = ctypes.c_bool
lib.uwDistanceLine.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float]
lib.uwDistanceLine.restype = ctypes.c_float
lib.uwDistanceEstimate.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwDistanceEstimate.restype = ctypes.c_float
lib.uwYaw.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwYaw.restype = ctypes.c_float
lib.uwStartClustersDistances.argtypes = [ctypes.POINTER(ref)]
lib.uwStartClustersDistances.restype = None
lib.uwRetrieveClustersDistances.argtypes = [ctypes.POINTER(ref)]
lib.uwRetrieveClustersDistances.restype = None
lib.uwAllPrototypes.argtypes = [ctypes.POINTER(ref)]
lib.uwAllPrototypes.restype = None
lib.uwPrototypeType.argtypes = [ctypes.c_uint32]
lib.uwPrototypeType.restype = UwPrototypeTypeEnum
lib.uwPrototypeJson.argtypes = [ctypes.c_uint32]
lib.uwPrototypeJson.restype = ctypes.c_void_p
lib.uwDefinitionsJson.argtypes = []
lib.uwDefinitionsJson.restype = ctypes.c_void_p
lib.uwHashString.argtypes = [ctypes.c_char_p]
lib.uwHashString.restype = ctypes.c_uint32
lib.uwMyForceStatistics.argtypes = [ctypes.POINTER(ref)]
lib.uwMyForceStatistics.restype = None
lib.uwUnitPathState.argtypes = [ctypes.c_uint32]
lib.uwUnitPathState.restype = UwPathStateEnum
lib.uwUnitUpgrades.argtypes = [ctypes.c_uint32, ctypes.POINTER(ref)]
lib.uwUnitUpgrades.restype = None
lib.uwTestShootingEntities.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
lib.uwTestShootingEntities.restype = ctypes.c_bool
lib.uwTestConstructionPlacement.argtypes = [ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32]
lib.uwTestConstructionPlacement.restype = ctypes.c_bool
lib.uwFindConstructionPlacement.argtypes = [ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32]
lib.uwFindConstructionPlacement.restype = ctypes.c_uint32
lib.uwOverviewFlags.argtypes = [ctypes.c_uint32]
lib.uwOverviewFlags.restype = UwOverviewFlags
lib.uwOverviewIds.argtypes = [ctypes.c_uint32, ctypes.POINTER(ref)]
lib.uwOverviewIds.restype = None
lib.uwOverviewExtract.argtypes = [ctypes.POINTER(ref)]
lib.uwOverviewExtract.restype = None
lib.uwStartUnitPathfinding.argtypes = [ctypes.POINTER(ref)]
lib.uwStartUnitPathfinding.restype = None
lib.uwRetrieveUnitPathfinding.argtypes = [ctypes.POINTER(ref)]
lib.uwRetrieveUnitPathfinding.restype = None

# Helper functions for string conversion
def to_bytes(s: str) -> bytes:
    return s.encode('utf-8') if s is not None else None

def from_bytes(b: bytes) -> str:
    return b.decode('utf-8') if b is not None else None

# Helper functions for working with UwIds
def get_uint32_array(ptr: ctypes.c_void_p, count: int) -> List[int]:
    """Convert a C array of uint32 to a Python list."""
    if not ptr or count == 0:
        return []
    array_type = ctypes.c_uint32 * count
    return list(array_type.from_address(ptr))

# Entity class to wrap component fetching
class Entity:
    def __init__(self, entity_id: int):
        self.id = entity_id
        self.pointer = lib.uwEntityPointer(entity_id)
        self.components = {}
        
    def fetch_components(self):
        """Fetch all available components for this entity."""
        self._try_fetch_component("proto_component", UwProtoComponent)
        self._try_fetch_component("owner_component", UwOwnerComponent)
        self._try_fetch_component("controller_component", UwControllerComponent)
        self._try_fetch_component("position_component", UwPositionComponent)
        self._try_fetch_component("unit_component", UwUnitComponent)
        self._try_fetch_component("life_component", UwLifeComponent)
        self._try_fetch_component("mana_component", UwManaComponent)
        self._try_fetch_component("move_component", UwMoveComponent)
        self._try_fetch_component("aim_component", UwAimComponent)
        self._try_fetch_component("recipe_component", UwRecipeComponent)
        self._try_fetch_component("recipe_statistics_component", UwRecipeStatisticsComponent)
        self._try_fetch_component("logistics_timestamp_component", UwLogisticsTimestampComponent)
        self._try_fetch_component("priority_component", UwPriorityComponent)
        self._try_fetch_component("amount_component", UwAmountComponent)
        self._try_fetch_component("attachment_component", UwAttachmentComponent)
        self._try_fetch_component("ping_component", UwPingComponent)
        self._try_fetch_component("player_component", UwPlayerComponent)
        self._try_fetch_component("player_ai_config_component", UwPlayerAiConfigComponent)
        self._try_fetch_component("force_component", UwForceComponent)
        self._try_fetch_component("force_details_component", UwForceDetailsComponent)
        self._try_fetch_component("foreign_policy_component", UwForeignPolicyComponent)
        self._try_fetch_component("diplomacy_proposal_component", UwDiplomacyProposalComponent)
        return self
        
    def _try_fetch_component(self, name: str, component_type):
        component = component_type()
        fetch_func = getattr(lib, f"uwFetch{component_type.__name__}")
        if fetch_func(self.pointer, ctypes.byref(component)):
            self.components[name] = component
        
    def __getattr__(self, name):
        if name in self.components:
            return self.components[name]
        raise AttributeError(f"Entity has no component '{name}'")

# Function wrappers
def get_lobby_id() -> int:
    """GetLobbyId wrapper."""
    return lib.uwGetLobbyId()

def get_user_id() -> int:
    """GetUserId wrapper."""
    return lib.uwGetUserId()

def get_server_port() -> ushort:
    """GetServerPort wrapper."""
    return lib.uwGetServerPort()

def admin_set_map_selection(path: str) -> None:
    """AdminSetMapSelection wrapper."""
    lib.uwAdminSetMapSelection(to_bytes(path))

def admin_start_game() -> None:
    """AdminStartGame wrapper."""
    lib.uwAdminStartGame()

def admin_terminate_game() -> None:
    """AdminTerminateGame wrapper."""
    lib.uwAdminTerminateGame()

def admin_set_game_speed(speed: float) -> None:
    """AdminSetGameSpeed wrapper."""
    lib.uwAdminSetGameSpeed(speed)

def admin_set_weather_speed(speed: float, offset: float) -> None:
    """AdminSetWeatherSpeed wrapper."""
    lib.uwAdminSetWeatherSpeed(speed, offset)

def admin_add_ai() -> None:
    """AdminAddAi wrapper."""
    lib.uwAdminAddAi()

def admin_kick_player(playerId: int) -> None:
    """AdminKickPlayer wrapper."""
    lib.uwAdminKickPlayer(playerId)

def admin_player_set_admin(playerId: int, admin: bool) -> None:
    """AdminPlayerSetAdmin wrapper."""
    lib.uwAdminPlayerSetAdmin(playerId, admin)

def admin_player_set_name(playerId: int, name: str) -> None:
    """AdminPlayerSetName wrapper."""
    lib.uwAdminPlayerSetName(playerId, to_bytes(name))

def admin_player_join_force(playerId: int, forceId: int) -> None:
    """AdminPlayerJoinForce wrapper."""
    lib.uwAdminPlayerJoinForce(playerId, forceId)

def admin_force_join_team(forceId: int, team: int) -> None:
    """AdminForceJoinTeam wrapper."""
    lib.uwAdminForceJoinTeam(forceId, team)

def admin_force_set_color(forceId: int, r: float, g: float, b: float) -> None:
    """AdminForceSetColor wrapper."""
    lib.uwAdminForceSetColor(forceId, r, g, b)

def admin_force_set_race(forceId: int, raceProto: int) -> None:
    """AdminForceSetRace wrapper."""
    lib.uwAdminForceSetRace(forceId, raceProto)

def admin_send_suggested_camera_focus(position: int) -> None:
    """AdminSendSuggestedCameraFocus wrapper."""
    lib.uwAdminSendSuggestedCameraFocus(position)

def admin_set_automatic_suggested_camera_focus(enabled: bool) -> None:
    """AdminSetAutomaticSuggestedCameraFocus wrapper."""
    lib.uwAdminSetAutomaticSuggestedCameraFocus(enabled)

def admin_send_chat(msg: str, flags: UwChatTargetFlags, targetId: int) -> None:
    """AdminSendChat wrapper."""
    lib.uwAdminSendChat(to_bytes(msg), flags, targetId)

def admin_send_ping(position: int, ping: UwPingEnum, targetForce: int) -> None:
    """AdminSendPing wrapper."""
    lib.uwAdminSendPing(position, ping, targetForce)

def initialize(version: int = UW_VERSION) -> None:
    """Initialize wrapper."""
    lib.uwInitialize(version)

def deinitialize() -> None:
    """Deinitialize wrapper."""
    lib.uwDeinitialize()

def set_exception_callback(callback: Callable) -> None:
    """SetExceptionCallback wrapper."""
    def c_callback():
        callback(from_bytes(message))
    
    cb = UwExceptionCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_exception_callback.callback = cb
    lib.uwSetExceptionCallback(cb)

def set_log_callback(callback: Callable) -> None:
    """SetLogCallback wrapper."""
    def c_callback():
        callback(data.contents)
    
    cb = UwLogCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_log_callback.callback = cb
    lib.uwSetLogCallback(cb)

def initialize_console_logger() -> None:
    """InitializeConsoleLogger wrapper."""
    lib.uwInitializeConsoleLogger()

def log(severity: UwSeverityEnum, message: str) -> None:
    """Log wrapper."""
    lib.uwLog(severity, to_bytes(message))

def set_connection_state_callback(callback: Callable) -> None:
    """SetConnectionStateCallback wrapper."""
    def c_callback():
        callback(UwConnectionStateEnum(state))
    
    cb = UwConnectionStateCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_connection_state_callback.callback = cb
    lib.uwSetConnectionStateCallback(cb)

def connection_state() -> UwConnectionStateEnum:
    """ConnectionState wrapper."""
    return lib.uwConnectionState()

def set_connect_start_gui(enabled: bool, extraCmdParams: str = "") -> None:
    """SetConnectStartGui wrapper."""
    lib.uwSetConnectStartGui(enabled, to_bytes(extraCmdParams))

def connect_find_lan(timeoutMicroseconds: ulong) -> bool:
    """ConnectFindLan wrapper."""
    return lib.uwConnectFindLan(timeoutMicroseconds)

def connect_direct(address: str, port: ushort) -> None:
    """ConnectDirect wrapper."""
    lib.uwConnectDirect(to_bytes(address), port)

def connect_lobby_id(lobbyId: ulong) -> None:
    """ConnectLobbyId wrapper."""
    lib.uwConnectLobbyId(lobbyId)

def connect_environment() -> bool:
    """ConnectEnvironment wrapper."""
    return lib.uwConnectEnvironment()

def connect_new_server(visibility: int, name: str, extraCmdParams: str = "") -> None:
    """ConnectNewServer wrapper."""
    lib.uwConnectNewServer(visibility, to_bytes(name), to_bytes(extraCmdParams))

def try_reconnect() -> bool:
    """TryReconnect wrapper."""
    return lib.uwTryReconnect()

def disconnect() -> None:
    """Disconnect wrapper."""
    lib.uwDisconnect()

def set_player_name(name: str) -> None:
    """SetPlayerName wrapper."""
    lib.uwSetPlayerName(to_bytes(name))

def set_player_color(r: float, g: float, b: float) -> None:
    """SetPlayerColor wrapper."""
    lib.uwSetPlayerColor(r, g, b)

def set_player_race(raceProto: int) -> None:
    """SetPlayerRace wrapper."""
    lib.uwSetPlayerRace(raceProto)

def my_player() -> bool:
    """MyPlayer wrapper."""
    return lib.uwMyPlayer()

def set_assist_config() -> None:
    """SetAssistConfig wrapper."""
    lib.uwSetAssistConfig()
    return UwAssistConfig

def performance_statistics() -> None:
    """PerformanceStatistics wrapper."""
    lib.uwPerformanceStatistics()
    return UwPerformanceStatistics

def order(unit: int) -> None:
    """Order wrapper."""
    lib.uwOrder(unit)
    return UwOrder

def orders(unit: int) -> None:
    """Orders wrapper."""
    lib.uwOrders(unit)
    return UwOrders

def command_place_construction(constructionProto: int, position: int, yaw: float, recipeProto: int, priority: UwPriorityEnum) -> None:
    """CommandPlaceConstruction wrapper."""
    lib.uwCommandPlaceConstruction(constructionProto, position, yaw, recipeProto, priority)

def command_set_recipe(unitOrConstructionId: int, recipeProto: int) -> None:
    """CommandSetRecipe wrapper."""
    lib.uwCommandSetRecipe(unitOrConstructionId, recipeProto)

def command_set_priority(unitOrConstructionId: int, priority: UwPriorityEnum) -> None:
    """CommandSetPriority wrapper."""
    lib.uwCommandSetPriority(unitOrConstructionId, priority)

def command_load(unitId: int, resourceProto: int) -> None:
    """CommandLoad wrapper."""
    lib.uwCommandLoad(unitId, resourceProto)

def command_unload(unitId: int) -> None:
    """CommandUnload wrapper."""
    lib.uwCommandUnload(unitId)

def command_move(unitId: int, position: int, yaw: float) -> None:
    """CommandMove wrapper."""
    lib.uwCommandMove(unitId, position, yaw)

def command_aim(unitId: int, targetId: int) -> None:
    """CommandAim wrapper."""
    lib.uwCommandAim(unitId, targetId)

def command_renounce_control(entityId: int) -> None:
    """CommandRenounceControl wrapper."""
    lib.uwCommandRenounceControl(entityId)

def command_self_destruct(entityId: int) -> None:
    """CommandSelfDestruct wrapper."""
    lib.uwCommandSelfDestruct(entityId)

def entity_pointer(id: int) -> IntPtr:
    """EntityPointer wrapper."""
    return lib.uwEntityPointer(id)

def entity_id(entity: IntPtr) -> int:
    """EntityId wrapper."""
    return lib.uwEntityId(entity)

def modified_entities() -> None:
    """ModifiedEntities wrapper."""
    lib.uwModifiedEntities()
    return UwIds

def all_entities() -> None:
    """AllEntities wrapper."""
    lib.uwAllEntities()
    return UwIds

def entity_exists(id: int) -> bool:
    """EntityExists wrapper."""
    return lib.uwEntityExists(id)

def fetch_proto_component(entity: IntPtr) -> bool:
    """FetchProtoComponent wrapper."""
    return lib.uwFetchProtoComponent(entity)

def fetch_owner_component(entity: IntPtr) -> bool:
    """FetchOwnerComponent wrapper."""
    return lib.uwFetchOwnerComponent(entity)

def fetch_controller_component(entity: IntPtr) -> bool:
    """FetchControllerComponent wrapper."""
    return lib.uwFetchControllerComponent(entity)

def fetch_position_component(entity: IntPtr) -> bool:
    """FetchPositionComponent wrapper."""
    return lib.uwFetchPositionComponent(entity)

def fetch_unit_component(entity: IntPtr) -> bool:
    """FetchUnitComponent wrapper."""
    return lib.uwFetchUnitComponent(entity)

def fetch_life_component(entity: IntPtr) -> bool:
    """FetchLifeComponent wrapper."""
    return lib.uwFetchLifeComponent(entity)

def fetch_mana_component(entity: IntPtr) -> bool:
    """FetchManaComponent wrapper."""
    return lib.uwFetchManaComponent(entity)

def fetch_move_component(entity: IntPtr) -> bool:
    """FetchMoveComponent wrapper."""
    return lib.uwFetchMoveComponent(entity)

def fetch_aim_component(entity: IntPtr) -> bool:
    """FetchAimComponent wrapper."""
    return lib.uwFetchAimComponent(entity)

def fetch_recipe_component(entity: IntPtr) -> bool:
    """FetchRecipeComponent wrapper."""
    return lib.uwFetchRecipeComponent(entity)

def fetch_recipe_statistics_component(entity: IntPtr) -> bool:
    """FetchRecipeStatisticsComponent wrapper."""
    return lib.uwFetchRecipeStatisticsComponent(entity)

def fetch_logistics_timestamp_component(entity: IntPtr) -> bool:
    """FetchLogisticsTimestampComponent wrapper."""
    return lib.uwFetchLogisticsTimestampComponent(entity)

def fetch_priority_component(entity: IntPtr) -> bool:
    """FetchPriorityComponent wrapper."""
    return lib.uwFetchPriorityComponent(entity)

def fetch_amount_component(entity: IntPtr) -> bool:
    """FetchAmountComponent wrapper."""
    return lib.uwFetchAmountComponent(entity)

def fetch_attachment_component(entity: IntPtr) -> bool:
    """FetchAttachmentComponent wrapper."""
    return lib.uwFetchAttachmentComponent(entity)

def fetch_ping_component(entity: IntPtr) -> bool:
    """FetchPingComponent wrapper."""
    return lib.uwFetchPingComponent(entity)

def fetch_player_component(entity: IntPtr) -> bool:
    """FetchPlayerComponent wrapper."""
    return lib.uwFetchPlayerComponent(entity)

def fetch_player_ai_config_component(entity: IntPtr) -> bool:
    """FetchPlayerAiConfigComponent wrapper."""
    return lib.uwFetchPlayerAiConfigComponent(entity)

def fetch_force_component(entity: IntPtr) -> bool:
    """FetchForceComponent wrapper."""
    return lib.uwFetchForceComponent(entity)

def fetch_force_details_component(entity: IntPtr) -> bool:
    """FetchForceDetailsComponent wrapper."""
    return lib.uwFetchForceDetailsComponent(entity)

def fetch_foreign_policy_component(entity: IntPtr) -> bool:
    """FetchForeignPolicyComponent wrapper."""
    return lib.uwFetchForeignPolicyComponent(entity)

def fetch_diplomacy_proposal_component(entity: IntPtr) -> bool:
    """FetchDiplomacyProposalComponent wrapper."""
    return lib.uwFetchDiplomacyProposalComponent(entity)

def set_game_state_callback(callback: Callable) -> None:
    """SetGameStateCallback wrapper."""
    def c_callback():
        callback(UwGameStateEnum(state))
    
    cb = UwGameStateCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_game_state_callback.callback = cb
    lib.uwSetGameStateCallback(cb)

def game_state() -> UwGameStateEnum:
    """GameState wrapper."""
    return lib.uwGameState()

def set_update_callback(callback: Callable) -> None:
    """SetUpdateCallback wrapper."""
    def c_callback():
        callback(tick, stepping)
    
    cb = UwUpdateCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_update_callback.callback = cb
    lib.uwSetUpdateCallback(cb)

def set_shooting_callback(callback: Callable) -> None:
    """SetShootingCallback wrapper."""
    def c_callback():
        callback(data.contents)
    
    cb = UwShootingCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_shooting_callback.callback = cb
    lib.uwSetShootingCallback(cb)

def set_explosions_callback(callback: Callable) -> None:
    """SetExplosionsCallback wrapper."""
    def c_callback():
        callback(data.contents)
    
    cb = UwExplosionsCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_explosions_callback.callback = cb
    lib.uwSetExplosionsCallback(cb)

def set_force_eliminated_callback(callback: Callable) -> None:
    """SetForceEliminatedCallback wrapper."""
    def c_callback():
        callback(id)
    
    cb = UwForceEliminatedCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_force_eliminated_callback.callback = cb
    lib.uwSetForceEliminatedCallback(cb)

def set_chat_callback(callback: Callable) -> None:
    """SetChatCallback wrapper."""
    def c_callback():
        callback(from_bytes(msg), sender, UwChatTargetFlags(flags))
    
    cb = UwChatCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_chat_callback.callback = cb
    lib.uwSetChatCallback(cb)

def set_task_completed_callback(callback: Callable) -> None:
    """SetTaskCompletedCallback wrapper."""
    def c_callback():
        callback(taskUserData, UwTaskTypeEnum(type))
    
    cb = UwTaskCompletedCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_task_completed_callback.callback = cb
    lib.uwSetTaskCompletedCallback(cb)

def set_map_state_callback(callback: Callable) -> None:
    """SetMapStateCallback wrapper."""
    def c_callback():
        callback(UwMapStateEnum(state))
    
    cb = UwMapStateCallbackType(c_callback)
    # Save the callback to prevent garbage collection
    set_map_state_callback.callback = cb
    lib.uwSetMapStateCallback(cb)

def map_state() -> UwMapStateEnum:
    """MapState wrapper."""
    return lib.uwMapState()

def map_info() -> bool:
    """MapInfo wrapper."""
    return lib.uwMapInfo()

def map_starting_positions() -> None:
    """MapStartingPositions wrapper."""
    lib.uwMapStartingPositions()
    return UwMapStartingPositionsArray

def tiles_count() -> int:
    """TilesCount wrapper."""
    return lib.uwTilesCount()

def tile(index: int) -> None:
    """Tile wrapper."""
    lib.uwTile(index)
    return UwTile

def clusters_count() -> int:
    """ClustersCount wrapper."""
    return lib.uwClustersCount()

def cluster(index: int) -> None:
    """Cluster wrapper."""
    lib.uwCluster(index)
    return UwCluster

def area_range(x: float, y: float, z: float, radius: float) -> None:
    """AreaRange wrapper."""
    lib.uwAreaRange(x, y, z, radius)
    return UwIds

def area_connected(position: int, radius: float) -> None:
    """AreaConnected wrapper."""
    lib.uwAreaConnected(position, radius)
    return UwIds

def area_neighborhood(position: int, radius: float) -> None:
    """AreaNeighborhood wrapper."""
    lib.uwAreaNeighborhood(position, radius)
    return UwIds

def area_extended(position: int, radius: float) -> None:
    """AreaExtended wrapper."""
    lib.uwAreaExtended(position, radius)
    return UwIds

def test_visible(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float) -> bool:
    """TestVisible wrapper."""
    return lib.uwTestVisible(x1, y1, z1, x2, y2, z2)

def test_shooting(shooterPosition: int, shooterProto: int, shootingRangeUpgrade: float, targetPosition: int, targetProto: int) -> bool:
    """TestShooting wrapper."""
    return lib.uwTestShooting(shooterPosition, shooterProto, shootingRangeUpgrade, targetPosition, targetProto)

def distance_line(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float) -> float:
    """DistanceLine wrapper."""
    return lib.uwDistanceLine(x1, y1, z1, x2, y2, z2)

def distance_estimate(positionA: int, positionB: int) -> float:
    """DistanceEstimate wrapper."""
    return lib.uwDistanceEstimate(positionA, positionB)

def yaw(startPosition: int, goalPosition: int) -> float:
    """Yaw wrapper."""
    return lib.uwYaw(startPosition, goalPosition)

def start_clusters_distances() -> None:
    """StartClustersDistances wrapper."""
    lib.uwStartClustersDistances()
    return UwClustersDistancesQuery

def retrieve_clusters_distances() -> None:
    """RetrieveClustersDistances wrapper."""
    lib.uwRetrieveClustersDistances()
    return UwClustersDistancesResult

def all_prototypes() -> None:
    """AllPrototypes wrapper."""
    lib.uwAllPrototypes()
    return UwIds

def prototype_type(prototypeId: int) -> UwPrototypeTypeEnum:
    """PrototypeType wrapper."""
    return lib.uwPrototypeType(prototypeId)

def prototype_json(prototypeId: int) -> IntPtr:
    """PrototypeJson wrapper."""
    return from_bytes(lib.uwPrototypeJson(prototypeId))

def definitions_json() -> IntPtr:
    """DefinitionsJson wrapper."""
    return lib.uwDefinitionsJson()

def hash_string(str: str) -> int:
    """HashString wrapper."""
    return lib.uwHashString(to_bytes(str))

def my_force_statistics() -> None:
    """MyForceStatistics wrapper."""
    lib.uwMyForceStatistics()
    return UwMyForceStatistics

def unit_path_state(unitId: int) -> UwPathStateEnum:
    """UnitPathState wrapper."""
    return lib.uwUnitPathState(unitId)

def unit_upgrades(unit: int) -> None:
    """UnitUpgrades wrapper."""
    lib.uwUnitUpgrades(unit)
    return UwUnitUpgrades

def test_shooting_entities(shooterId: int, targetId: int) -> bool:
    """TestShootingEntities wrapper."""
    return lib.uwTestShootingEntities(shooterId, targetId)

def test_construction_placement(constructionProto: int, position: int, recipeProto: int) -> bool:
    """TestConstructionPlacement wrapper."""
    return lib.uwTestConstructionPlacement(constructionProto, position, recipeProto)

def find_construction_placement(constructionProto: int, position: int, recipeProto: int) -> int:
    """FindConstructionPlacement wrapper."""
    return lib.uwFindConstructionPlacement(constructionProto, position, recipeProto)

def overview_flags(position: int) -> UwOverviewFlags:
    """OverviewFlags wrapper."""
    return lib.uwOverviewFlags(position)

def overview_ids(position: int) -> None:
    """OverviewIds wrapper."""
    lib.uwOverviewIds(position)
    return UwIds

def overview_extract() -> None:
    """OverviewExtract wrapper."""
    lib.uwOverviewExtract()
    return UwOverviewExtract

def start_unit_pathfinding() -> None:
    """StartUnitPathfinding wrapper."""
    lib.uwStartUnitPathfinding()
    return UwUnitPathfindingQuery

def retrieve_unit_pathfinding() -> None:
    """RetrieveUnitPathfinding wrapper."""
    lib.uwRetrieveUnitPathfinding()
    return UwUnitPathfindingResult
